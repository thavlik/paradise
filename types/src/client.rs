// Code generated by oto; DO NOT EDIT.
pub use crate::types::*;
use reqwest;
use serde_json;

pub struct AudioInterfaceAsyncClient {
    client: reqwest::Client,

    create_stream_endpoint: String,

    delete_stream_endpoint: String,

    get_device_info_endpoint: String,

    list_streams_endpoint: String,
}

impl AudioInterfaceAsyncClient {
    pub fn new(endpoint: String) -> Self {
        let create_stream_endpoint = format!("{}/oto/AudioInterface.CreateStream", &endpoint);

        let delete_stream_endpoint = format!("{}/oto/AudioInterface.DeleteStream", &endpoint);

        let get_device_info_endpoint = format!("{}/oto/AudioInterface.GetDeviceInfo", &endpoint);

        let list_streams_endpoint = format!("{}/oto/AudioInterface.ListStreams", &endpoint);

        AudioInterfaceAsyncClient {
            client: reqwest::Client::new(),

            create_stream_endpoint,

            delete_stream_endpoint,

            get_device_info_endpoint,

            list_streams_endpoint,
        }
    }
}

#[async_trait]
impl AudioInterface for AudioInterfaceAsyncClient {
    async fn create_stream(
        &self,
        req: CreateStreamRequest,
    ) -> Result<CreateStreamResponse, String> {
        match self
            .client
            .post(&self.create_stream_endpoint)
            .json(&req)
            .send()
            .await
        {
            Ok(resp) => {
                let status = resp.status();
                match resp.json().await {
                    Ok(mut result) => match status {
                        reqwest::StatusCode::OK => Ok(result),
                        _ => match result.take_error() {
                            Some(msg) => Err(msg),
                            None => Err(format!("status code {}", status)),
                        },
                    },
                    Err(e) => Err(format!("{:?}", e)),
                }
            }
            Err(e) => Err(format!("{:?}", e)),
        }
    }

    async fn delete_stream(
        &self,
        req: DeleteStreamRequest,
    ) -> Result<DeleteStreamResponse, String> {
        match self
            .client
            .post(&self.delete_stream_endpoint)
            .json(&req)
            .send()
            .await
        {
            Ok(resp) => {
                let status = resp.status();
                match resp.json().await {
                    Ok(mut result) => match status {
                        reqwest::StatusCode::OK => Ok(result),
                        _ => match result.take_error() {
                            Some(msg) => Err(msg),
                            None => Err(format!("status code {}", status)),
                        },
                    },
                    Err(e) => Err(format!("{:?}", e)),
                }
            }
            Err(e) => Err(format!("{:?}", e)),
        }
    }

    async fn get_device_info(
        &self,
        req: GetDeviceInfoRequest,
    ) -> Result<GetDeviceInfoResponse, String> {
        match self
            .client
            .post(&self.get_device_info_endpoint)
            .json(&req)
            .send()
            .await
        {
            Ok(resp) => {
                let status = resp.status();
                match resp.json().await {
                    Ok(mut result) => match status {
                        reqwest::StatusCode::OK => Ok(result),
                        _ => match result.take_error() {
                            Some(msg) => Err(msg),
                            None => Err(format!("status code {}", status)),
                        },
                    },
                    Err(e) => Err(format!("{:?}", e)),
                }
            }
            Err(e) => Err(format!("{:?}", e)),
        }
    }

    async fn list_streams(&self, req: ListStreamsRequest) -> Result<ListStreamsResponse, String> {
        match self
            .client
            .post(&self.list_streams_endpoint)
            .json(&req)
            .send()
            .await
        {
            Ok(resp) => {
                let status = resp.status();
                match resp.json().await {
                    Ok(mut result) => match status {
                        reqwest::StatusCode::OK => Ok(result),
                        _ => match result.take_error() {
                            Some(msg) => Err(msg),
                            None => Err(format!("status code {}", status)),
                        },
                    },
                    Err(e) => Err(format!("{:?}", e)),
                }
            }
            Err(e) => Err(format!("{:?}", e)),
        }
    }
}
