# Similar to nginx, we can alias addresses at the start of
# the config. Anywhere in this config you see an upstream name
# used, a full address (with protocol) will be substituted.
# It is recommended that you use named upstreams as it greatly
# improves readability.
upstream:
  # Anywhere "my-secure-upstream" is used where an address
  # is expected, it'll be replaced with the value below.
  - name: my-secure-upstream
  # Format is <IP>:<PORT>/<PROTOCOL>
    addr: 169.231.34.101:20000/UDP
  - name: my-insecure-upstream
    addr: 127.0.0.1:20001/UDP

# Virtual audio device definitions
devices:
  # Simple example of a virtual audio device. Note that
  # mixing and other complicated routing is done in user
  # space. This describes the kernel side of things.
  - name: "My Virtual Device"
    listeners:
      # Network interface on which to listen for receiving
      # audio packets. Specifying 0.0.0.0 as the IP will
      # listen on all interfaces.
      - addr: my-secure-upstream
      # Transport layer security configuration. This is
      # most useful for sending audio over public pipes.
        tls:
          cacert: /etc/cert/ca.crt # optional cert authority
          cert: /etc/cert/tls.crt # public cert
          key: /etc/cert/tls.key # private key
      # Expose the same endpoint without TLS on localhost.
      # The idea is that this is not externally accessible,
      # and it's used internally by your computer for
      # efficient audio routing when TLS is unnecessary.
      - addr: my-insecure-upstream
    # Number of input channels. Audio received by the endpoints
    # will be directed to one of these, which can then be used
    # by any application utilizing microphone input.
    inputs: 2
    # Output channel definitions
    outputs:
    # First output feeds back into both inputs. This
    # demonstrates how multiple destination addresses
    # can be used for a single output, and also how
    # a potentially terrible feedback loop can be
    # created.
      - dest:
          - name: my-example-loopback-0
            addr: my-secure-upstream
            channel: 0
          # It is only necessary to specify the public
          # certs on the client when self-signing. Use
          # of LetsEncrypt et al creates certificates
          # that are trusted by the client machine's
          # certificate authority. TODO: skip key verification?
            tls:
              enabled: true
              cacert: /etc/cert/ca.crt
              cert: /etc/cert/tls.crt
          - name: my-example-loopback-1
            addr: my-insecure-upstream
            channel: 1
    # Second output doesn't go anywhere. We'll define
    # it anyway so it will be recognized by the OS.
    # You could use 127.0.0.1 and run a server in user
    # space that receives the audio.
      - dest: []
