// Code generated by oto; DO NOT EDIT.

package stream

import (
	"context"
	"log"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"
)

type AudioInterface interface {
	CreateStream(context.Context, CreateStreamRequest) (*CreateStreamResponse, error)
	DeleteStream(context.Context, DeleteStreamRequest) (*DeleteStreamResponse, error)
	GetDeviceInfo(context.Context, GetDeviceInfoRequest) (*GetDeviceInfoResponse, error)
	ListStreams(context.Context, ListStreamsRequest) (*ListStreamsResponse, error)
}

type audioInterfaceServer struct {
	server         *otohttp.Server
	audioInterface AudioInterface
}

func RegisterAudioInterface(server *otohttp.Server, audioInterface AudioInterface) {
	handler := &audioInterfaceServer{
		server:         server,
		audioInterface: audioInterface,
	}
	server.Register("AudioInterface", "CreateStream", handler.handleCreateStream)
	server.Register("AudioInterface", "DeleteStream", handler.handleDeleteStream)
	server.Register("AudioInterface", "GetDeviceInfo", handler.handleGetDeviceInfo)
	server.Register("AudioInterface", "ListStreams", handler.handleListStreams)
}

func (s *audioInterfaceServer) handleCreateStream(w http.ResponseWriter, r *http.Request) {
	var request CreateStreamRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.audioInterface.CreateStream(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *audioInterfaceServer) handleDeleteStream(w http.ResponseWriter, r *http.Request) {
	var request DeleteStreamRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.audioInterface.DeleteStream(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *audioInterfaceServer) handleGetDeviceInfo(w http.ResponseWriter, r *http.Request) {
	var request GetDeviceInfoRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.audioInterface.GetDeviceInfo(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *audioInterfaceServer) handleListStreams(w http.ResponseWriter, r *http.Request) {
	var request ListStreamsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.audioInterface.ListStreams(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type Address struct {
	Host string `json:"host"`
	Port int    `json:"port"`
}

type HardwarePort struct {
	Channel      int    `json:"channel"`
	SampleRate   int    `json:"sampleRate"`
	SampleFormat string `json:"sampleFormat"`
}

type Stream struct {
	Name         string       `json:"name"`
	IsOutput     bool         `json:"isOutput"`
	Address      Address      `json:"address"`
	HardwarePort HardwarePort `json:"hardwarePort"`
}

type CreateStreamRequest struct {
	Stream Stream `json:"stream"`
}

type CreateStreamResponse struct {
	Created string `json:"created"`
	Error   string `json:"error,omitempty"`
}

type DeleteStreamRequest struct {
	Name string `json:"name"`
}

type DeleteStreamResponse struct {
	Error string `json:"error,omitempty"`
}

type GetDeviceInfoRequest struct {
}

type ChannelInfo struct {
	SampleRates []int  `json:"sampleRates"`
	Desc        string `json:"desc"`
}

type DeviceInfo struct {
	Channels []ChannelInfo `json:"channels"`
}

type GetDeviceInfoResponse struct {
	Info  DeviceInfo `json:"info"`
	Error string     `json:"error,omitempty"`
}

type ListStreamsRequest struct {
}

type StreamWithMetrics struct {
	Stream        Stream `json:"stream"`
	Status        string `json:"status"`
	TotalSent     int    `json:"totalSent"`
	TotalReceived int    `json:"totalReceived"`
	Created       string `json:"created"`
}

type ListStreamsResponse struct {
	Streams []StreamWithMetrics `json:"streams"`
	Error   string              `json:"error,omitempty"`
}
